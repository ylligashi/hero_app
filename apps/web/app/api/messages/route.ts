import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/app/api/auth/[...nextauth]/route";
import { prisma } from "@repo/database";
import { MessageRole } from "@prisma/client";

export async function POST(req: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.id) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const { content, conversationId } = await req.json();

    if (!content || !conversationId) {
      return NextResponse.json(
        { error: "Missing required fields" },
        { status: 400 },
      );
    }

    // Get the conversation to verify ownership and get hero details
    const conversation = await prisma.conversation.findUnique({
      where: {
        id: conversationId,
        userId: session.user.id,
      },
      include: {
        hero: true,
      },
    });

    if (!conversation) {
      return NextResponse.json(
        { error: "Conversation not found" },
        { status: 404 },
      );
    }

    // Save the user message
    const userMessage = await prisma.message.create({
      data: {
        content,
        role: MessageRole.USER,
        userId: session.user.id,
        conversationId,
      },
    });

    // In a real implementation, you'd send the message to Ollama
    // For now, we'll create a mock response

    const heroResponseContent = `This is a mock response from ${conversation.hero.name}. In a real implementation, this would be generated by the Ollama model.`;

    // Save the hero's response
    const heroMessage = await prisma.message.create({
      data: {
        content: heroResponseContent,
        role: MessageRole.ASSISTANT,
        conversationId,
      },
    });

    // Update the conversation's updatedAt timestamp
    await prisma.conversation.update({
      where: { id: conversationId },
      data: { updatedAt: new Date() },
    });

    return NextResponse.json({
      userMessage,
      heroMessage,
    });
  } catch (error) {
    console.error("Error processing message:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 },
    );
  }
}
